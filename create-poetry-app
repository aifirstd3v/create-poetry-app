#!/bin/sh

# This script automates the process of creating a new Python project using Poetry.
# It allows the user to specify the project name, author name, author email, Python version,
# the upper limit of the Python version, and whether to create the virtual environment
# inside the project directory. The script also updates the pyproject.toml file
# with the specified Python version, description, and authors.

# Default values
DEFAULT_PROJECT_NAME="projectname"
DEFAULT_MY_NAME="main"
DEFAULT_PYTHON_VERSION="3.12"
DEFAULT_VENV_CONFIG="true"
DEFAULT_DESCRIPTION=""
DEFAULT_AUTHOR_NAME="Your Name"
DEFAULT_AUTHOR_EMAIL="you@example.com"

# Initialize variables with default values
PROJECT_NAME=""
MY_NAME=$DEFAULT_MY_NAME
PYTHON_VERSION=$DEFAULT_PYTHON_VERSION
UPPER_PYTHON_VERSION=""
VENV_CONFIG=$DEFAULT_VENV_CONFIG
DESCRIPTION=$DEFAULT_DESCRIPTION
AUTHOR_NAME=$DEFAULT_AUTHOR_NAME
AUTHOR_EMAIL=$DEFAULT_AUTHOR_EMAIL
USE_DEFAULTS=false

# Parse command line options
while getopts "yp:n:v:u:d:a:e:c:" opt; do
  case $opt in
    y) USE_DEFAULTS=true ;;
    p) PROJECT_NAME=$OPTARG ;;
    n) MY_NAME=$OPTARG ;;
    v) PYTHON_VERSION=$OPTARG ;;
    u) UPPER_PYTHON_VERSION=$OPTARG ;;
    d) DESCRIPTION=$OPTARG ;;
    a) AUTHOR_NAME=$OPTARG ;;
    e) AUTHOR_EMAIL=$OPTARG ;;
    c) VENV_CONFIG=$OPTARG ;;
    \?) echo "Invalid option -$OPTARG" >&2 ;;
  esac
done

# Ensure project name is provided if not provided by -p option
if [ -z "$PROJECT_NAME" ]; then
  echo "Enter project name:"
  read PROJECT_NAME
  if [ -z "$PROJECT_NAME" ]; then
    echo "Project name is required. Exiting."
    exit 1
  fi
fi

# Function to validate email format
validate_email() {
  if echo "$1" | grep -Eq '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'; then
    return 0
  else
    return 1
  fi
}

# Prompt the user for input values if not provided via command line options or use default values
if [ "$USE_DEFAULTS" = false ]; then
  echo "Enter your package name (default: $MY_NAME):"
  read INPUT
  MY_NAME=${INPUT:-$MY_NAME}

  echo "Enter Python version (default: $PYTHON_VERSION):"
  read INPUT
  PYTHON_VERSION="${INPUT:-$PYTHON_VERSION}"

  echo "Enter upper Python version limit (default: $PYTHON_VERSION):"
  read INPUT
  UPPER_PYTHON_VERSION="${INPUT:-$UPPER_PYTHON_VERSION}"

  echo "Enter project description (default: $DESCRIPTION):"
  read INPUT
  DESCRIPTION=${INPUT:-$DESCRIPTION}

  echo "Enter author name (default: $AUTHOR_NAME):"
  read INPUT
  AUTHOR_NAME=${INPUT:-$AUTHOR_NAME}

  while true; do
    echo "Enter author email (default: $AUTHOR_EMAIL):"
    read INPUT
    AUTHOR_EMAIL=${INPUT:-$AUTHOR_EMAIL}

    if [ -z "$AUTHOR_EMAIL" ] || validate_email "$AUTHOR_EMAIL"; then
      if [ -z "$AUTHOR_EMAIL" ]; then
        AUTHOR_EMAIL=$DEFAULT_AUTHOR_EMAIL
      fi
      break
    else
      echo "Invalid email format. Please enter a valid email address."
    fi
  done

  echo "Set virtualenvs.in-project to true/false (default: $VENV_CONFIG):"
  read INPUT
  VENV_CONFIG=${INPUT:-$VENV_CONFIG}
else
  if [ -z "$UPPER_PYTHON_VERSION" ]; then
    PYTHON_VERSION="^$PYTHON_VERSION"
  fi
fi

# Set UPPER_PYTHON_VERSION if not provided
if [ -z "$UPPER_PYTHON_VERSION" ]; then
  DEPENDENCY_VERSION="^$PYTHON_VERSION"
else
  DEPENDENCY_VERSION=">=$PYTHON_VERSION,<${UPPER_PYTHON_VERSION}"
fi

# Combine author name and email
AUTHOR="${AUTHOR_NAME} <${AUTHOR_EMAIL}>"

# Create a new Poetry project with the specified project name and author name
poetry new "$PROJECT_NAME" --name "$MY_NAME" --src

# Change to the project directory
cd "$PROJECT_NAME" || exit

# Create a new pyproject.toml file with the specified values
cat <<EOL > pyproject.toml
[tool.poetry]
name = "$MY_NAME"
version = "0.1.0"
description = "$DESCRIPTION"
authors = ["$AUTHOR"]
readme = "README.md"
packages = [{include = "$MY_NAME", from = "src"}]

[tool.poetry.dependencies]
python = "$DEPENDENCY_VERSION"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
EOL

# Configure Poetry to create virtual environments inside the project directory if specified
poetry config virtualenvs.in-project "$VENV_CONFIG"

# Use the specified Python version for the project's virtual environment
poetry env use "$PYTHON_VERSION"

# Install the project dependencies
poetry install

# Activate the virtual environment
. .venv/bin/activate

# Print a success message
echo "Project '$PROJECT_NAME' created and virtual environment activated with Python $PYTHON_VERSION"
