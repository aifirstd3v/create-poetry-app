#!/bin/sh

# This script automates the process of creating a new Python project using Poetry.
# It allows the user to specify the project name, author name, author email, Python version, 
# the upper limit of the Python version, and whether to create the virtual environment 
# inside the project directory. The script also updates the pyproject.toml file 
# with the specified Python version, description, and authors.

# [ Example ]
#  > create-poetry-app
#     Enter project name (default: projectname):
#     matrixworld
#     Enter your project name (default: main):
#     singularity
#     Enter Python version (default: 3.12):
#     3.10
#     Enter upper Python version limit (default: 4.0):
#     3.13
#     Enter project description (default: ):
#     Project Matrix Multiverse
#     Enter author name (default: Your Name):
#     Smith Neo   
#     Enter author email (default: you@example.com):
#     code@universe.33
#     Invalid email format. Please enter a valid email address.
#     Enter author email (default: you@example.com):
#     code@33.universe
#     Set virtualenvs.in-project to true/false (default: true):
#     
#     Created package singularity in matrixworld
#     Creating virtualenv singularity in ~/matrixworld/.venv
#     Using virtualenv: ~/matrixworld/.venv
#     Updating dependencies
#     Resolving dependencies... (0.1s)
#     
#     Writing lock file
#     
#     Installing the current project: singularity (0.1.0)
#     Project 'matrixworld' created and virtual environment activated with Python 3.10




# Default values
DEFAULT_PROJECT_NAME="projectname"
DEFAULT_MY_NAME="main"
DEFAULT_PYTHON_VERSION="3.12"
DEFAULT_UPPER_PYTHON_VERSION="4.0"
DEFAULT_VENV_CONFIG="true"
DEFAULT_DESCRIPTION=""
DEFAULT_AUTHOR_NAME="Your Name"
DEFAULT_AUTHOR_EMAIL="you@example.com"

# Prompt the user for input values, or use default values if no input is provided
echo "Enter project name (default: $DEFAULT_PROJECT_NAME):"
read PROJECT_NAME
PROJECT_NAME=${PROJECT_NAME:-$DEFAULT_PROJECT_NAME}

echo "Enter your project name (default: $DEFAULT_MY_NAME):"
read MY_NAME
MY_NAME=${MY_NAME:-$DEFAULT_MY_NAME}

echo "Enter Python version (default: $DEFAULT_PYTHON_VERSION):"
read PYTHON_VERSION
PYTHON_VERSION=${PYTHON_VERSION:-$DEFAULT_PYTHON_VERSION}

echo "Enter upper Python version limit (default: $DEFAULT_UPPER_PYTHON_VERSION):"
read UPPER_PYTHON_VERSION
UPPER_PYTHON_VERSION=${UPPER_PYTHON_VERSION:-$DEFAULT_UPPER_PYTHON_VERSION}

echo "Enter project description (default: $DEFAULT_DESCRIPTION):"
read DESCRIPTION
DESCRIPTION=${DESCRIPTION:-$DEFAULT_DESCRIPTION}

echo "Enter author name (default: $DEFAULT_AUTHOR_NAME):"
read AUTHOR_NAME
AUTHOR_NAME=${AUTHOR_NAME:-$DEFAULT_AUTHOR_NAME}

# Function to validate email format
validate_email() {
  if echo "$1" | grep -Eq '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'; then
    return 0
  else
    return 1
  fi
}

# Prompt for author email with validation
while true; do
  echo "Enter author email (default: $DEFAULT_AUTHOR_EMAIL):"
  read AUTHOR_EMAIL
  AUTHOR_EMAIL=${AUTHOR_EMAIL:-$DEFAULT_AUTHOR_EMAIL}
  
  if [ -z "$AUTHOR_EMAIL" ] || validate_email "$AUTHOR_EMAIL"; then
    if [ -z "$AUTHOR_EMAIL" ]; then
      AUTHOR_EMAIL=$DEFAULT_AUTHOR_EMAIL
    fi
    break
  else
    echo "Invalid email format. Please enter a valid email address."
  fi
done

echo "Set virtualenvs.in-project to true/false (default: $DEFAULT_VENV_CONFIG):"
read VENV_CONFIG
VENV_CONFIG=${VENV_CONFIG:-$DEFAULT_VENV_CONFIG}

# Combine author name and email
AUTHOR="${AUTHOR_NAME} <${AUTHOR_EMAIL}>"

# Create a new Poetry project with the specified project name and author name
poetry new "$PROJECT_NAME" --name "$MY_NAME" --src

# Change to the project directory
cd "$PROJECT_NAME" || exit

# Create a new pyproject.toml file with the specified values
cat <<EOL > pyproject.toml
[tool.poetry]
name = "$MY_NAME"
version = "0.1.0"
description = "$DESCRIPTION"
authors = ["$AUTHOR"]
readme = "README.md"
packages = [{include = "$MY_NAME", from = "src"}]

[tool.poetry.dependencies]
python = ">=${PYTHON_VERSION},<${UPPER_PYTHON_VERSION}"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
EOL

# Configure Poetry to create virtual environments inside the project directory if specified
poetry config virtualenvs.in-project "$VENV_CONFIG"

# Use the specified Python version for the project's virtual environment
poetry env use "$PYTHON_VERSION"

# Install the project dependencies
poetry install

# Activate the virtual environment
source .venv/bin/activate

# Print a success message
echo "Project '$PROJECT_NAME' created and virtual environment activated with Python $PYTHON_VERSION"
